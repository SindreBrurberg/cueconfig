cueconfig-test
cmp stdout stdout.golden

-- .exampleconfig/cue.mod/module.cue --
module: "example.com/example"

-- .exampleconfig/cue.mod/pkg/github.com/rogpeppe/cueconfig/metaschema.cue --
package cueconfig

// This file defines the "meta-schema" - a schema that outlines the schema that can be provided
// by packages that use the cueconfig package.

// #Config defines the configuration schema that the user must specify
// in their configuration file. It should be a pure schema with no defaults.
// Note that the default is to allow any configuration at all.
#Config: {
	// runtime supplies any runtime values available to the configuration.
	// This is intended to be filled in by the implementation, not the user.
	runtime?: #Runtime
	...
}

// #Runtime holds runtime values that will be mixed into the configuration
// in addition to the user-specified configuration. Examples might
// be environment variables or the current working directory.
#Runtime: {...}

// #Defaults holds any program-defined default values
// for the configuration. Any defaults supplied by the user's
// configuration will have been resolved before this is
// applied.
//
// Note that if this is not supplied, there will be no program-defined
// defaults filled in by Load.
#Defaults: {
	// runtime holds any values supplied as part of the runtime
	// parameter to Load.
	runtime: #Runtime
	// config should define any default values, possibly in terms
	// of the runtime values.
	config: #Config
}


-- .exampleconfig/cue.mod/pkg/example.com/cueconfigtest/schema.cue --
package cueconfigtest

import "github.com/rogpeppe/cueconfig"

#Config: cueconfig.#Config & {
	foo: int & >= 0 & <100
	bar: [string]: #Baz
}

#Baz: {
	name: string
	blah: string
	foobie: [...int]
}

#Defaults: cueconfig.#Defaults & {
	config: {
		foo: *1 | _
		bar: [n=_]: {
			name: n
			blah: *"default value" | _
		}
	}
}

-- .exampleconfig/config.cue --
package example

import "example.com/cueconfigtest"

cueconfigtest.#Config

foo: 75

_#Bar: {
	blah: *"hello" | _
	...
}

bar: [_]: _#Bar
bar: a: {
	foobie: [1, 2, 3]
}
bar: b: {}

-- stdout.golden --
{
	"foo": 75,
	"bar": {
		"a": {
			"blah": "hello",
			"foobie": [
				1,
				2,
				3
			]
		},
		"b": {
			"blah": "hello",
			"foobie": []
		}
	}
}
